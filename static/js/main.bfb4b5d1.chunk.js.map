{"version":3,"sources":["components/Quote.jsx","App.js","serviceWorker.js","index.js"],"names":["library","add","fab","Quote","props","getNewQuote","getQuote","state","quote","author","this","axios","get","then","res","data","quotes","randomQuote","Math","floor","random","length","setState","id","className","href","target","title","icon","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAKAA,IAAQC,IAAIC,K,IA2EGC,E,YAxEb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KA2BRC,YAAc,WAEZ,EAAKC,YA5BL,EAAKC,MAAQ,CACXC,MAAO,GACPC,OAAQ,IAJO,E,iFASjBC,KAAKJ,a,iCAGK,IAAD,OAITK,IAAMC,IAFJ,0IAEaC,MAAK,SAAAC,GAClB,IAAIC,EAAOD,EAAIC,KAAKC,OAEhBC,EAAcF,EADHG,KAAKC,MAAMD,KAAKE,SAAWL,EAAKM,SAG/C,EAAKC,SAAS,CACZd,MAAOS,EAAW,MAClBR,OAAQQ,EAAW,c,+BAUf,IAAD,EACmBP,KAAKH,MAAvBC,EADD,EACCA,MAAOC,EADR,EACQA,OACf,OACE,yBAAKc,GAAG,WACN,wBAAIC,UAAU,SAAd,oBAEA,yBAAKD,GAAG,aACN,yBAAKA,GAAG,QACN,2BAAIf,IAEN,yBAAKe,GAAG,UACN,4BAAKd,IAGP,yBAAKc,GAAG,WACN,uBACEA,GAAG,cACHE,KAAI,gDAA2CjB,EAA3C,YAAoDC,GACxDiB,OAAO,SACPC,MAAM,+BAEN,8BACE,kBAAC,IAAD,CAAiBC,KAAM,CAAC,MAAO,eAGnC,4BACEL,GAAG,YACHC,UAAU,UACVK,QAASnB,KAAKL,aAHhB,oB,GA3DQyB,aCGLC,E,iLAJX,OAAO,kBAAC,EAAD,U,GAFOD,aCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,kB","file":"static/js/main.bfb4b5d1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nlibrary.add(fab);\r\n\r\nclass Quote extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      quote: \"\",\r\n      author: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getQuote();\r\n  }\r\n\r\n  getQuote() {\r\n    let url =\r\n      \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\r\n\r\n    axios.get(url).then(res => {\r\n      let data = res.data.quotes;\r\n      let quoteNum = Math.floor(Math.random() * data.length);\r\n      let randomQuote = data[quoteNum];\r\n\r\n      this.setState({\r\n        quote: randomQuote[\"quote\"],\r\n        author: randomQuote[\"author\"]\r\n      });\r\n    });\r\n  }\r\n\r\n  getNewQuote = () => {\r\n    //will be called on clicking the New Quote button\r\n    this.getQuote();\r\n  };\r\n\r\n  render() {\r\n    const { quote, author } = this.state; //Destructuring\r\n    return (\r\n      <div id=\"wrapper\">\r\n        <h1 className=\"title\">Random Quote App</h1>\r\n\r\n        <div id=\"quote-box\">\r\n          <div id=\"text\">\r\n            <p>{quote}</p>\r\n          </div>\r\n          <div id=\"author\">\r\n            <h5>{author}</h5>\r\n          </div>\r\n\r\n          <div id=\"buttons\">\r\n            <a\r\n              id=\"tweet-quote\"\r\n              href={`https://twitter.com/intent/tweet?text=${quote} ${author}`}\r\n              target=\"_blank\"\r\n              title=\"Post this quote on twitter!\"\r\n            >\r\n              <span>\r\n                <FontAwesomeIcon icon={[\"fab\", \"twitter\"]} />\r\n              </span>\r\n            </a>\r\n            <button\r\n              id=\"new-quote\"\r\n              className=\"buttons\"\r\n              onClick={this.getNewQuote}\r\n            >\r\n              New Quote\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Quote;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Quote from \"./components/Quote\";\n\nclass App extends Component {\n  render() {\n    return <Quote />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}